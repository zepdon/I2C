#include <WiFi.h>
#include <MQTT.h>
#include <RTClib.h>
#include <LCD_I2C.h>

// WiFi and MQTT Configuration
const char ssid[] = "ZEPwifi";
const char pass[] = "ohhimark";
const char mqtt_broker[] = "test.mosquitto.org";
const char mqtt_topic[] = "group/219/stepper";
const char mqtt_client_id[] = "esp32_stepper_219";
int MQTT_PORT = 1883;

// Initialize RTC and LCD
RTC_DS1307 rtc;
LCD_I2C lcd(0x27, 16, 2); // Default address, 16x2 LCD

// Stepper Motor Configuration
#define PIN1 17
#define PIN2 18
#define PIN3 19
#define PIN4 23

int step_number = 0;
const int steps_per_revolution = 2048;
int current_position = 0; // Track current position

WiFiClient net;
MQTTClient client;

// Function to update LCD with time and status
void updateLCD(const char* status) {
    DateTime now = rtc.now();
    
    // First row: Time
    lcd.clear();
    lcd.setCursor(0, 0);
    char timeStr[9];
    sprintf(timeStr, "%02d:%02d:%02d", 
            now.hour(), 
            now.minute(), 
            now.second());
    lcd.print(timeStr);
    
    // Add position to first row
    lcd.setCursor(10, 0);
    lcd.print("P:");
    lcd.print(current_position);
    
    // Second row: Status message
    lcd.setCursor(0, 1);
    lcd.print(status);
}

void messageReceived(String &topic, String &payload) {
    Serial.println("Incoming: " + topic + " - " + payload);
    
    // Prevent feedback loop
    if (payload.startsWith("Stepper moved to position")) {
        return;
    }
    
    // Process payload as position
    int position = payload.toInt();
    if (position >= 0 && position <= 11) {
        updateLCD("Moving...");
        int steps = (position * steps_per_revolution) / 12;
        moveToPosition(steps);
        current_position = position;
        
        // Update LCD and send acknowledgment
        char statusMsg[16];
        sprintf(statusMsg, "At Position: %d", position);
        updateLCD(statusMsg);
        client.publish(mqtt_topic, "Stepper moved to position " + String(position));
    } else {
        updateLCD("Invalid position!");
    }
}

void moveToPosition(int steps) {
    static int current_steps = 0;
    int steps_to_move = steps - current_steps;
    
    bool direction = (steps_to_move > 0);
    steps_to_move = abs(steps_to_move);
    
    for (int i = 0; i < steps_to_move; i++) {
        OneStep(direction);
        delay(3);
    }
    current_steps = steps;
}

void OneStep(bool dir) {
    if (dir) {
        switch (step_number) {
            case 0: digitalWrite(PIN1, HIGH); digitalWrite(PIN2, LOW); digitalWrite(PIN3, LOW); digitalWrite(PIN4, LOW); break;
            case 1: digitalWrite(PIN1, LOW); digitalWrite(PIN2, HIGH); digitalWrite(PIN3, LOW); digitalWrite(PIN4, LOW); break;
            case 2: digitalWrite(PIN1, LOW); digitalWrite(PIN2, LOW); digitalWrite(PIN3, HIGH); digitalWrite(PIN4, LOW); break;
            case 3: digitalWrite(PIN1, LOW); digitalWrite(PIN2, LOW); digitalWrite(PIN3, LOW); digitalWrite(PIN4, HIGH); break;
        }
    } else {
        switch (step_number) {
            case 0: digitalWrite(PIN1, LOW); digitalWrite(PIN2, LOW); digitalWrite(PIN3, LOW); digitalWrite(PIN4, HIGH); break;
            case 1: digitalWrite(PIN1, LOW); digitalWrite(PIN2, LOW); digitalWrite(PIN3, HIGH); digitalWrite(PIN4, LOW); break;
            case 2: digitalWrite(PIN1, LOW); digitalWrite(PIN2, HIGH); digitalWrite(PIN3, LOW); digitalWrite(PIN4, LOW); break;
            case 3: digitalWrite(PIN1, HIGH); digitalWrite(PIN2, LOW); digitalWrite(PIN3, LOW); digitalWrite(PIN4, LOW); break;
        }
    }
    step_number++;
    if (step_number > 3) step_number = 0;
}

void connectWiFi() {
    updateLCD("Connecting WiFi");
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
    }
    updateLCD("WiFi Connected");
    delay(1000);
}

void connectMQTT() {
    updateLCD("Connect MQTT...");
    while (!client.connect(mqtt_client_id)) {
        delay(1000);
    }
    client.subscribe(mqtt_topic);
    updateLCD("MQTT Connected");
    delay(1000);
}

void setup() {
    Serial.begin(9600);
    
    // Initialize LCD
    lcd.begin(); // For ESP32, use lcd.begin(4,5)
    lcd.backlight();
    
    // Initialize RTC
    if (!rtc.begin()) {
        updateLCD("RTC Error!");
        while(1);
    }
    
    // Uncomment to set RTC time
    // rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    
    // Initialize motor pins
    pinMode(PIN1, OUTPUT);
    pinMode(PIN2, OUTPUT);
    pinMode(PIN3, OUTPUT);
    pinMode(PIN4, OUTPUT);
    
    connectWiFi();
    
    client.begin(mqtt_broker, MQTT_PORT, net);
    client.onMessage(messageReceived);
    
    connectMQTT();
}

void loop() {
    client.loop();
    
    // Update LCD every second with current time and position
    static unsigned long lastUpdate = 0;
    if (millis() - lastUpdate >= 1000) {
        char statusMsg[16];
        sprintf(statusMsg, "At Position: %d", current_position);
        updateLCD(statusMsg);
        lastUpdate = millis();
    }
    
    // Check MQTT connection
    if (!client.connected()) {
        connectMQTT();
    }
    
    delay(10);
}
